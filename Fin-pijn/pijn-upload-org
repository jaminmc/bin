#!/usr/bin/env python3
import argparse
import ftplib
import json
import os
import sys
import time
from tqdm import tqdm
from pathlib import Path
from pathlib import PurePath
# from pprint import pprint
import logging
from datetime import datetime
from datetime import timedelta
from dateutil import parser
from selenium.webdriver.chrome.options import Options
import magic
import pandas as pd
import requests
from requests_toolbelt import MultipartEncoder, MultipartEncoderMonitor
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as ec

brave = 0
if os.path.isfile("/Applications/Brave Browser.app/Contents/MacOS/Brave Browser"):
    brave = 1
    bravepath = "/Applications/Brave Browser.app/Contents/MacOS/Brave Browser"
if os.path.isfile("/usr/bin/brave-browser"):
    brave = 1
    bravepath = "/usr/bin/brave-browser"


logger = logging.getLogger(__name__)
salemURL = 'https://www.zcastmedia.com/'
salemvidaddurl = 'https://www.zcastmedia.com/shows/pray-in-jesus-name-1502/broadcasts/add?liveDate='
salemmp3url = 'https://www.zcastmedia.com/shows/pray-in-jesus-name-1501/broadcasts/add?liveDate='
salemuser = 'PIJNUser'
salempass = 'Stre@m1ng!'
rumblesleep = 60

rumbleapi = '77c1ff4c4cbe22e175ecbcb336ae5313188eb4b8'
rumblechannel = 416895
rumbleurl = 'https://rumble.com/api/simple-upload.php'

rumbleuser = 'prayinjesusname'
rumblepass = 'Justin789$'
rumblechannelname = 'PrayInJesusNameNews'
rumbleheadless = False
ltaccountId = '628706'
ltapi = '5MvW8x3owNYp'
ltchannel = '8303-1074'
# ltftpserver = 'pijn.zakarmedia.com'
ltftpserver = 'jeeves.zakarmedia.com'
ltftpuser = 'pijnnews'
ltftppass = 'GodBlessYou'

addtolightcastdesc = str('\n\nGet free alerts at http://PrayInJesusName.org\n\n\n' +
                         '© ' + str(datetime.now().year) + ', Chaplain Gordon James Klingenschmitt, PhD.\n' +
                         'Airs on NRB TV, Direct TV Ch.378, Roku, AppleTV, Amazon FireTV,' +
                         ' AndroidTV, GoogleTV, Smart TV, iTunes and www.PrayInJesusName.org')

mime = magic.Magic(mime=True)


def parseExcel(excelfile, videofile):
    df = pd.DataFrame(pd.read_excel(excelfile))
    for index, row in df.iterrows():
        if row['Filename'] == videofile:
            return(row)
        # print("File: "+videofile+" Does not exist in Excel file!!")
    sys.exit("File: "+videofile+" Does not exist in Excel file!!")


def salemconnect():
    options = webdriver.ChromeOptions()
    options.add_argument("--window-size=1547,1102")
    driver = webdriver.Chrome(options=options)
    driver.get(salemURL)
    time.sleep(3)
    id_box = driver.find_element(By.ID, 'username')
    id_box.send_keys(salemuser)
    pass_box = driver.find_element(By.ID, 'password')
    pass_box.send_keys(salempass)
    login_button = driver.find_element(By.CLASS_NAME, 'salem-ui-blue-button')
    login_button.click()
    time.sleep(3)
    return driver


def salemvid(driver, data):
    driver.get(salemvidaddurl + data['airdate'])
    xpath = "//div[@id='episodeAddUpdate']/ul/li[{}]"
    time.sleep(3)
    for i in range(3, 0, -1):
        driver.find_element(By.XPATH, xpath.format(i)).click()
        if os.path.exists(data[f'{["trans", "thumb", "srt"][i-1]}']):
            driver.find_element(By.XPATH, "//input[@type='file']").send_keys(data[f'{["trans", "thumb", "srt"][i-1]}'])
    driver.find_element(By.XPATH, xpath.format(1)).click()
    driver.find_element(By.XPATH, "//input[@type='file']").send_keys(data['vidfile'])
    time.sleep(6)
    driver.find_element(By.XPATH, "//div[@id='episodeAddUpdate']/ul/li").click()
    driver.find_element(By.XPATH, "//div[@id='mainView']/div/div/div[2]/input").send_keys(data['title'])
    time.sleep(2)
    driver.switch_to.frame(0)
    driver.find_element(By.ID, "tinymce").send_keys(data['description'])
    time.sleep(2)
    driver.switch_to.default_content()
    driver.find_element(By.XPATH, "//div[@id='mainView']/div[2]/button").click()
    wait = WebDriverWait(driver, 300)
    wait.until(ec.visibility_of_element_located((By.XPATH, "//div[@id='episodesCalendar']/table/tbody/tr/td/table/tbody/tr/td[4]/div/a/span")))
    time.sleep(6)


def salemmp3(driver, data):
    driver.get(salemmp3url + data['airdate'])
    time.sleep(2)
    input_file = driver.find_element(By.XPATH, "//input[2]")
    input_file.send_keys(data['trans'])
    time.sleep(1)
    mp3_input = driver.find_element(By.XPATH, "//input[@type='file']")
    mp3_input.send_keys(data['mp3'])
    time.sleep(1)
    title_input = driver.find_element(By.XPATH, "//div[@id='mainView']/div/div/div/div/div[2]/input")
    title_input.click()
    title_input.send_keys(data['title'])
    driver.switch_to.frame(0)
    description_input = driver.find_element(By.ID, "tinymce")
    description_input.send_keys(data['description'])
    time.sleep(2)
    driver.switch_to.default_content()
    publish_button = driver.find_element(By.XPATH, "//div[@id='mainView']/div[2]/button")
    publish_button.click()
    wait = WebDriverWait(driver, 300)
    wait.until(ec.visibility_of_element_located((By.XPATH, "//div[@id='episodesCalendar']/table/tbody/tr/td/table/tbody/tr/td[4]/div/a/span")))
    time.sleep(5)


import os
from pathlib import Path, PurePath
import requests
import json
from tqdm import tqdm
from requests_toolbelt import MultipartEncoder, MultipartEncoderMonitor

def RumbleUpload(data, videofile, logfile):
    cc = ''
    thumb = ''
    files = {'video': videofile}
    vidpath = str(Path(videofile).parent)
    pvid = PurePath(vidpath)
    if pvid.name == "1080p60":
        vidpath = str(pvid.parent)
    vidfile = Path(videofile).stem
    vidfile = vidfile.replace("-cc", "")
    captions_path = os.path.join(vidpath, 'Captions')
    thumbs_path = os.path.join(vidpath, 'thumbs')
    if os.path.exists(os.path.join(captions_path, vidfile + '.vtt')):
        cc = os.path.join(captions_path, vidfile + '.vtt')
    elif os.path.exists(os.path.join(captions_path, vidfile + '.srt')):
        cc = os.path.join(captions_path, vidfile + '.srt')

    thumb_file = os.path.join(thumbs_path, vidfile + '.jpg')
    if os.path.exists(thumb_file):
        thumb = thumb_file
    elif os.path.exists(os.path.join(PurePath(vidpath).parent, thumb_file)):
        thumb = os.path.join(PurePath(vidpath).parent, thumb_file)

    if thumb and cc:
        files.update({'cc_en': cc, 'thumb': thumb})
    elif thumb:
        files.update({'thumb': thumb})
    elif cc:
        files.update({'cc_en': cc})

    print(f'Data:\n{data}\n\nFiles:\n{files}\n\n')

    rumblefiles = {key: (Path(value).name, open(value, 'rb'), 'application/octet-stream') for key, value in files.items()}

    new_d = {str(key): str(value) for key, value in data.items()}
    fields = {**new_d, **rumblefiles}
    encoder = MultipartEncoder(fields=fields)
    with tqdm(desc=Path(videofile).stem,
              total=encoder.len,
              dynamic_ncols=True,
              unit='B',
              unit_scale=True,
              unit_divisor=1024) as bar:
        multipart_monitor = MultipartEncoderMonitor(encoder, lambda monitor: bar.update(monitor.bytes_read - bar.n))
        req = requests.post(rumbleurl, data=multipart_monitor, headers={'Content-Type': multipart_monitor.content_type})
    print(req.text)
    with open(logfile + '-rumble.json', 'w') as outfile:
        json.dump(req.json(), outfile, indent=2)

def RumbleUploadNoAPI(data):
    if data["headless"]:
        options = Options()
        options.add_argument("--headless")
        options.add_argument("--disable-gpu")  # Last I checked this was necessary.
        if brave == 1:
            options.binary_location = bravepath
        driver = webdriver.Chrome(options=options)
    else:
        if brave == 1:
            options = Options()
            options.binary_location = bravepath
            driver = webdriver.Chrome(options=options)
        else:
            driver = webdriver.Chrome()
    driver.set_window_size(1547, 1400)
    driver.implicitly_wait(2400)
    driver.get("https://rumble.com/")
    time.sleep(2)
    driver.find_element(
        By.XPATH, "//*/text()[normalize-space(.)='Sign In']/parent::*"
    ).click()
    driver.find_element(By.ID, "login-username").clear()
    driver.find_element(By.ID, "login-username").send_keys(data["user"])
    driver.find_element(By.ID, "login-password").clear()
    driver.find_element(By.ID, "login-password").send_keys(data["password"])
    driver.find_element(By.ID, "login-username").click()
    driver.find_element(By.ID, "login-password").click()
    element = driver.find_element(By.XPATH, "//button[@type='submit']")
    driver.execute_script("arguments[0].click();", element)
    time.sleep(3)
    driver.find_element(
        By.XPATH,
        "(.//*[normalize-space(text()) and normalize-space(.)='View all'])[32]/following::button[3]",
    ).click()
    time.sleep(3)
    driver.find_element(By.LINK_TEXT, "Upload Video").click()
    fileinput = driver.find_element(By.ID, "Filedata")
    driver.execute_script(
        'arguments[0].style = ""; arguments[0].style.display = "block"; arguments[0].style.visibility = "visible";',
        fileinput,
    )
    driver.find_element(By.ID, "Filedata").send_keys(data["vidfile"])
    driver.find_element(By.ID, "title").click()
    driver.find_element(By.ID, "title").clear()
    driver.find_element(By.ID, "title").send_keys(data["title"])
    if "description" in data:
        driver.find_element(By.ID, "description").click()
        driver.find_element(By.ID, "description").clear()
        driver.find_element(By.ID, "description").send_keys(data["description"])
    if "thumbnail" in data:
        fileinput = driver.find_element(By.ID, "customThumb")
        driver.execute_script(
            'arguments[0].style = ""; arguments[0].style.display = "block"; arguments[0].style.visibility = "visible";',
            fileinput,
        )
        driver.find_element(By.ID, "customThumb").send_keys(data["thumbnail"])
        time.sleep(3)
    if "tags" in data:
        driver.find_element(By.ID, "tags").click()
        driver.find_element(By.ID, "tags").clear()
        driver.find_element(By.ID, "tags").send_keys(data["tags"])
    if "channel" in data:
        try:
            driver.find_element(By.ID, "channelId").click()
            dropdown = driver.find_element(By.ID, "channelId")
            dropdown.find_element(
                By.XPATH, "//option[. = '" + data["channel"] + "']"
            ).click()
        except Exception as e:
            print(f"Could not set channel. Error: {e}")
    print("Trying Starttime")
    if "start" in data:
        try:
            driver.find_element(
                By.XPATH, "//fieldset[@id='visibility-options']/div[4]/label"
            ).click()
            driver.find_element(By.ID, "scheduler_datetime").click()
            driver.find_element(By.ID, "scheduler_datetime").clear()
            driver.find_element(By.ID, "scheduler_datetime").send_keys(
                data["start"].strftime("%m/%d/%Y - %I:%M %p")
            )
            driver.find_element(By.XPATH, "//button[@type='button']").click()
        except Exception as e:
            print(f"Could not set Time. Make sure the format was correct.\nError: {e}")
    time.sleep(1)
    print("Trying submit upload")
    element = driver.find_element(By.ID, "submitForm")
    driver.execute_script("arguments[0].click();", element)
    time.sleep(1)
    print("Trying first item 2nd page")
    driver.find_element(
        By.XPATH, "//form[@id='form2']/div/div[2]/div[3]/div/a/sub"
    ).click()
    print("Trying second item 2nd page")
    driver.find_element(By.XPATH, "//form[@id='form2']/div/div[7]/div/label").click()
    print("Trying third item 2nd page")
    driver.find_element(By.XPATH, "//form[@id='form2']/div/div[7]/div[2]/label").click()
    time.sleep(3)
    print("Trying final click")
    element = driver.find_element(By.ID, "submitForm2")
    driver.execute_script("arguments[0].click();", element)
    print("Waiting for transfer to finish")
    driver.find_element(By.ID, "direct").click()
    time.sleep(1)
    direct = driver.find_element(By.ID, "direct").get_attribute("value")
    embed = driver.find_element(By.ID, "embed").get_attribute("value")
    monetized = driver.find_element(By.ID, "monetized").get_attribute("value")
    print(f"Direct link: {direct}\n\nEmbed: \n{embed}\n\nMonitized:\n{monetized}")
    driver.close()
    driver.quit()


def lightcastCreate(data, logfile):
    url = 'https://www.lightcast.com/api/public/v1/archives.php'
    if data['keywords']:
        keywords = data['keywords']
        payload = {'action': 'create', 'accountId': ltaccountId, 'apiKey': ltapi, 'type': 'video',
                   'title': data['title'], 'description': data['description'], 'language': 'en',
                   'assignToChannel': ltchannel, 'keywords': keywords}
    else:
        payload = {'action': 'create', 'accountId': ltaccountId, 'apiKey': ltapi, 'type': 'video',
                   'title': data['title'], 'description': data['description'], 'language': 'en',
                   'assignToChannel': ltchannel}
    print(payload)
    req = requests.post(url, data=payload, timeout=(5, 300))
    with open(logfile + '.ltcreate.json', 'w') as outfile:
        json.dump(req.json(), outfile, indent=2)
    print(f'LightCast Create:\n{req.text}\n\n')
    response = req.json()
    return(response['media_id'])


def lightcastUpload(data, logfile):
    url = 'https://www.lightcast.com/api/public/v1/archives.php'
    payload = {'action': 'upload', 'accountId': ltaccountId, 'apiKey': ltapi,
               'mediaId': data['mediaId'], 'server': ltftpserver, 'username': ltftpuser,
               'password': ltftppass, 'filepath': data['ltvideopath']}
    print(payload)
    req = requests.post(url, data=payload, timeout=(5, 300))
    print(req.url)
    with open(logfile + '.ltvideo.json', 'w') as outfile:
        json.dump(req.json(), outfile, indent=2)
    print(f'LightCast Video:\n{req.text}\n\n')
    response = req.json()
    if response['status'] == 0:
        print("Upload of Video FAILED!!!!")
        return False
    else:
        print("Video Upload Successfull!")
        return True


def lightcastThumb(data, logfile):
    url = 'https://www.lightcast.com/api/public/v1/archives.php'
    payload = {'action': 'thumbUpload', 'accountId': ltaccountId, 'apiKey': ltapi, 'mediaId': data['mediaId'],
               'server': ltftpserver, 'username': ltftpuser, 'password': ltftppass,
               'filepath': data['ltthumbnail']}
    print(payload)
    req = requests.post(url, data=payload, timeout=(5, 300))
    print(req.url)
    with open(logfile + '.ltthumb.json', 'w') as outfile:
        json.dump(req.json(), outfile, indent=2)
    print(f'LightCast Thumbnail:\n{req.text}\n\n')
    payload2 = {'action': 'deactivate', 'accountId': ltaccountId,
                'apiKey': ltapi, 'mediaId': data['mediaId']}
    req = requests.post(url, data=payload2, timeout=(5, 300))


def lightcastSubtitle(data, logfile):
    url = 'https://www.lightcast.com/api/public/v1/archives.php?action=subtitleUpload'
    payload = {'action': 'subtitleUpload', 'accountId': ltaccountId, 'apiKey': ltapi,
               'mediaId': data['mediaId'], 'server': ltftpserver, 'username': ltftpuser,
               'password': ltftppass, 'language': 'en', 'filepath': data['ltsubtitle']}
    print(payload)
    req = requests.post(url, data=payload, timeout=(5, 300))
    print(req.url)
    with open(logfile + '.ltsub.json', 'w') as outfile:
        json.dump(req.json(), outfile, indent=2)
    print(f'LightCast Subtitle:\n{req.text}\n\n')


def lightftpcheck(ftppath):
    ftp = ftplib.FTP()
    ftp.connect(ltftpserver, 21)
    ftp.login(ltftpuser, ltftppass)
    try:
        resp = ftp.size(ftppath)
        print(ftppath, "is", resp, "bytes")
    except ftplib.error_perm:
        print(ftppath, "Does not exist!")
        sys.exit(1)
    return


def main(argv):
    global rumblesleep
    my_parser = argparse.ArgumentParser(
        description='Get Info from Excel for filename')
    my_parser.add_argument('ExcelFile',
                           metavar='ExcelFile',
                           type=str,
                           help='The Excell file with the PIJN Info')
    my_parser.add_argument('VideoFiles',
                           metavar='VideoFiles',
                           nargs='+',
                           help='The Video File(s)')
    my_parser.add_argument('-r',
                           '--rumble',
                           action='store_true',
                           help='Only Upload to Rumble')
    my_parser.add_argument('-l',
                           '--lightcast',
                           action='store_true',
                           help='Only upload to Lightcast')
    my_parser.add_argument('-s',
                           '--salem',
                           action='store_true',
                           help='Only upload to salem')
    my_parser.add_argument('-a',
                           '--all',
                           action='store_true',
                           help='Upload to all!')
    argp = my_parser.parse_args()
    if argp.all:
        argp.lightcast = True
        argp.rumble = True
        argp.salem = True
        good = True
    parsefiles = argp.VideoFiles
    videofiles = []
    for x in parsefiles:
        if os.path.exists(x):
            videofiles.append(x)
            # print('Adding:', x)
        else:
            # print('Deblobbing:', x)
            for xx in iglob(x):
                if os.path.exists(xx):
                    videofiles.append(xx)
                # print('Adding:', xx)
    print("Testing Metadata...")
    for file in videofiles:
        if os.path.exists(file):
            vidsource = file
            videofile = Path(vidsource).stem
            vidfile = videofile.replace("-cc", "")
        else:
            # sys.exit(f"Video file {vidsource} does not exist!")
            print(f"Video file {file} does not exist!")

        if not os.path.exists(argp.ExcelFile):
            print(f"Excel file {argp.ExcelFile} does not exist!")
            # sys.exit(f"Excel file {argp.ExcelFile} does not exist!")
        # print(f'Excel File: {argp.ExcelFile}\nVideo Filename: {vidfile}')
        else:
            excelfile = Path(argp.ExcelFile).absolute()
            mainfolder = str(Path(excelfile).parent)
            monthweek = Path(Path(excelfile).parent).name
            if monthweek == 'Daily' or monthweek == 'Weekly':
                # print('Not from working folder....')
                monthweek = Path(PurePath(excelfile).parents[2]).name
            data = parseExcel(excelfile, vidfile)
            # print(f'Data: {data}')
            title = data['Episode Title (100 Char Max)'].strip()
            description = data['Episode Description'].strip()
            try:
                tags = data['Tags(Keywords) Comma Seperated'].strip()
            except:
                tags = None
                print("No tags found. Settings tags to none")
            if tags:
                tagslist = [word.strip() for word in tags.split(',')]
            else:
                tagslist = None
            guid = time.strftime("%Y") + data['Media ID'].strip()
            ltvideopath = str('/PIJN/' + str(monthweek) +
                              '/MP4/1080p60/' + str(vidfile) + '-cc.mp4')
            ltthumbnail = str('/PIJN/' + str(monthweek) +
                              '/thumbs/' + str(vidfile) + '.jpg')
            ltsubtitle = str('/PIJN/' + str(monthweek) +
                             '/Captions/' + str(vidfile) + '.vtt')
            if tagslist:
                tagsfromlist = ','.join([str(x) for x in tagslist])
            else:
                tagsfromlist = None
            print("File: ", vidfile, "\nTitle:", title, "\nDescription:", description,
                  "\nDate:", monthweek, "\nTags: " ,tags, "\nTagList:", tagsfromlist, "\n\n")
    if argp.salem:
        salemdriver = salemconnect()

    for file in videofiles:

        if os.path.exists(file):
            vidsource = file
            vidpath = str(Path(vidsource).parent)
            videofile = Path(vidsource).stem
            vidfile = videofile.replace("-cc", "")
            
        else:
            # sys.exit(f"Video file {vidsource} does not exist!")
            print(f"Video file {file} does not exist!")

        if not os.path.exists(argp.ExcelFile):
            print(f"Excel file {argp.ExcelFile} does not exist!")
            # sys.exit(f"Excel file {argp.ExcelFile} does not exist!")
        # print(f'Excel File: {argp.ExcelFile}\nVideo Filename: {vidfile}')
        else:
            excelfile = Path(argp.ExcelFile).absolute()
            excelpath = str(Path(excelfile).parent)
            mainfolder = str(Path(excelfile).parent)
            monthweek = Path(Path(excelfile).parent).name
            if monthweek == 'Daily' or monthweek == 'Weekly':
                # print('Not from working folder....')
                monthweek = Path(PurePath(excelfile).parents[2]).name
            data = parseExcel(excelfile, vidfile)
            # print(f'Data: {data}')
            title = data['Episode Title (100 Char Max)'].strip()
            description = data['Episode Description'].strip()
            try:
                tags = data['Tags(Keywords) Comma Seperated'].strip()
            except:
                tags = None
                print("No tags found. Settings tags to none")
            if tags:
                tagslist = [word.strip() for word in tags.split(',')]
            else:
                tagslist = None
            if tagslist:
                tagsfromlist = ','.join([str(x) for x in tagslist])
            else:
                tagsfromlist = None
            guid = time.strftime("%Y") + data['Media ID'].strip()
            ltvideopath = str('/PIJN/' + str(monthweek) +
                              '/MP4/1080p60/' + str(vidfile) + '-cc.mp4')
            ltthumbnail = str('/PIJN/' + str(monthweek) +
                              '/thumbs/' + str(vidfile) + '.jpg')
            ltsubtitle = str('/PIJN/' + str(monthweek) +
                             '/Captions/' + str(vidfile) + '.vtt')
            logpath = excelpath + '/logs'
            if 'Distro' in logpath:
                logpath = str(PurePath(excelpath).parents[1]) + '/logs'
            logfile = logpath + '/' + vidfile
            # print('Logpath:', logpath)
            # print('Logfile:', logfile)
            if not os.path.exists(logpath):
                os.makedirs(logpath)
            if tagsfromlist:
                rumbledata = {'title': title, 'description': description, 'guid': guid,
                              'license_type': 6, 'access_token': rumbleapi, 'channel_id': rumblechannel, 'tags': tagsfromlist}
            else:
                rumbledata = {'title': title, 'description': description, 'guid': guid,
                              'license_type': 6, 'access_token': rumbleapi, 'channel_id': rumblechannel}
            ltdata = {'title': title, 'description': description + addtolightcastdesc, 'ltvideopath': ltvideopath,
                      'ltthumbnail': ltthumbnail, 'ltsubtitle': ltsubtitle, 'keywords': tagsfromlist}
            good = False


        if argp.lightcast:
            good = True
            lightftpcheck(ltvideopath)
            lightftpcheck(ltthumbnail)
            lightftpcheck(ltsubtitle)
            ltmediaid = lightcastCreate(ltdata, logfile)
            if ltmediaid:

                try:
                    ltdata['mediaId'] = ltmediaid
                    ltuploaded = lightcastUpload(ltdata, logfile)
                    if ltuploaded:
                        lightcastThumb(ltdata, logfile)
                        lightcastSubtitle(ltdata, logfile)
                except Exception as e:
                    print('Uploading to Lightcast FAILED!')
                    logger.exception(e)

        if argp.salem:
            good = True
            global rumblesleep
            rumblesleep = 5
            # print('lets go!')
            salemdata = {}
            salemdata['title'] = title
            salemdata['description'] = description
            salemdata['airdate'] = data['Air Date'].strftime("%Y-%m-%d")
            salemdata['thumb'] = mainfolder + '/salem/thumbs/' + vidfile + '.jpg'
            salemdata['trans'] = mainfolder + '/salem/Transcripts/' + vidfile + '.pdf'
            salemdata['srt'] = mainfolder + '/Captions/' + vidfile + '.srt'
            if os.path.exists(mainfolder + '/salem/' + vidfile + '-cc.mp4'):
                salemdata['vidfile'] = mainfolder + '/salem/' + vidfile + '-cc.mp4'
            elif os.path.exists(mainfolder + '/salem/' + vidfile + '.mp4'):
                salemdata['vidfile'] = mainfolder + '/salem/' + vidfile + '.mp4'
            elif os.path.exists(mainfolder + '/MP4/720p30/' + vidfile + '-cc.mp4'):
                salemdata['vidfile'] = mainfolder + '/MP4/720p30/' + vidfile + '-cc.mp4'
            elif os.path.exists(mainfolder + '/MP4/720p30/' + vidfile + '.mp4'):
                salemdata['vidfile'] = mainfolder + '/MP4/720p30/' + vidfile + '.mp4'
            else:
                sys.exit("Salem Video File does not exist!")
            if os.path.exists(mainfolder + '/salem/mp3/' + vidfile + '.mp3'):
                salemdata['mp3'] = mainfolder + '/salem/mp3/' + vidfile + '.mp3'
            elif os.path.exists(mainfolder + '/mp3/' + vidfile + '.mp3'):
                salemdata['mp3'] = mainfolder + '/mp3/' + vidfile + '.mp3'
            # pprint(salemdata)
            try:
                print('Uploading ' + vidfile + 'to Salem Video..')
                salemvid(salemdriver, salemdata)
                print('Uploading ' + vidfile + 'to Salem Audio..')
                salemmp3(salemdriver, salemdata)
            except Exception as e:
                print(f'Uploading ' + vidfile + ' to Salem FAILED! Error{e}')

        if argp.rumble:
            good = True
            try:
                if os.path.exists(mainfolder + '/youtube/' + vidfile + '-cc.mp4'):
                    rumblevid = mainfolder + '/youtube/' + vidfile + '-cc.mp4'
                elif os.path.exists(mainfolder + '/youtube/' + vidfile + '.mp4'):
                    rumblevid = mainfolder + '/youtube/' + vidfile + '.mp4'
                elif os.path.exists(mainfolder + '/MP4/1080p60/' + vidfile + '-cc.mp4'):
                    rumblevid = mainfolder + '/MP4/1080p60/' + vidfile + '-cc.mp4'
                elif os.path.exists(mainfolder + '/MP4/1080p60/' + vidfile + '.mp4'):
                    rumblevid = mainfolder + '/MP4/1080p60/' + vidfile + '.mp4'
                else:
                    sys.exit("Rumble Video File does not exist!")
                thumb = None
                rumbledata['vidfile'] = rumblevid
                rumbledata['user'] = rumbleuser
                rumbledata['password'] = rumblepass
                rumbledata['channel'] = rumblechannelname
                rumbledata['start'] = data['Air Date'] + timedelta(hours=7)
                rumbledata['headless'] = rumbleheadless
                if os.path.exists(vidpath + '/thumbs/' + vidfile + '.jpg'):
                    thumb = vidpath + '/thumbs/' + vidfile + '.jpg'
                elif os.path.exists(str(Path(vidpath).parent) + '/thumbs/' + vidfile + '.jpg'):
                    thumb = str(Path(vidpath).parent) + '/thumbs/' + vidfile + '.jpg'
                if thumb:
                    rumbledata['thumbnail'] = thumb
                # RumbleUpload(rumbledata, rumblevid, logfile)
                print(rumbledata)
                RumbleUploadNoAPI(rumbledata)

                print(f"Rumble Upload for '{rumblevid}' complete. Sleeping for {rumblesleep} seconds")
                time.sleep(rumblesleep)
            except Exception as e:
                print('Uploading to Rumble FAILED!')
                logger.exception(e)
                continue

        if not good:
            print('No Task added... Run with -h for help')

    if argp.salem:
        salemdriver.close()



if __name__ == "__main__":
    main(sys.argv[1:])
