#!/usr/bin/env python3

import sys
import os
import subprocess
from datetime import datetime, timedelta
import ftplib
import openpyxl
import shutil
from tqdm import tqdm
import threading
import time
import glob

today = datetime.now()
next_mon = today + timedelta(days=(7 - today.weekday()))
next_tue = next_mon + timedelta(days=1)
next_wed = next_mon + timedelta(days=2)
next_thu = next_mon + timedelta(days=3)
next_fri = next_mon + timedelta(days=4)
month = next_mon.strftime('%m')
weeknum = (next_mon.day - 1) // 7 + 1
week = f"{month}-{weeknum:02d}"
nextweekfolder = os.path.realpath(f"/Volumes/Storage/PIJN/{week}")
defaultexcel = os.path.join(
    nextweekfolder, f"PIJN-{next_mon.strftime('%m%d')}-{next_fri.strftime('%m%d')}.xlsx")
excelftplog = os.path.join(
    nextweekfolder, f"PIJN-{next_mon.strftime('%m%d')}-{next_fri.strftime('%m%d')}-FTP.xlsx")

daily_folder = os.path.join(
    nextweekfolder, 'Distro', 'Daily')

weekly_folder = os.path.join(
    nextweekfolder, 'Distro', 'Weekly')

ftp_hosts_daily = [
    {'name': 'CTN ftp site', 'host': 'ftp.ctntv.net', 'port': 21, 'user': 'KWHSCA', 'pass': '264Ch',
        'path': '/PrayinJesusName'},
    {'name': 'NWSMAX', 'host': '104.143.4.12', 'port': 15150, 'user': 'PIJN', 'pass': 'PIJN2021!',
        'path': '/'},
    {'name': 'TheWalk-new-HD', 'host': 'wggstv16.ddns.net', 'port': 21, 'user': 'pijn', 'pass': 'pijn1492',
        'path': '/'},

]

ftp_hosts_weekly = [
    {'host': 'program.vtntv.com', 'user': 'programmer', 'pass': 'vtnftp',
        'path': '/PIJN News'},
]

# get *.mpg and *.txt from /folder

weekly_files = ( glob.glob(weekly_folder + "/*.mpg") + glob.glob(weekly_folder + "/*.txt") )
daily_files = ( glob.glob(daily_folder + "/*.mpg") + glob.glob(daily_folder + "/*.txt") )

print('Weekly files: ', weekly_files)
print('Daily files: ', daily_files)


def upload_progress(data, file_obj, total_bytes):
    file_obj.update(len(data))
    return file_obj

# Function to upload a file to the FTP server and overwrite if it exists
def upload_file(ftp_host, file_path, server_dir):
    try:
        with ftplib.FTP() as ftp:
            ftp.connect(ftp_host['host'], ftp_host['port'])
            ftp.login(ftp_host['user'], ftp_host['pass'])
            ftp.cwd(ftp_host['path'])
            with open(file_path, 'rb') as f:
                with tqdm(total=os.path.getsize(file_path), unit="B", unit_scale=True, unit_divisor=1024, miniters=1, dynamic_ncols=True, desc=os.path.basename(file_path)) as t:
                    start_time = time.time()
                    # Use 'STOR' to overwrite existing files if they exist
                    ftp.storbinary('STOR ' + os.path.basename(file_path), f, blocksize=81920, callback=lambda data: upload_progress(data, t, os.path.getsize(file_path)))
                    end_time = time.time()
                    upload_speed = os.path.getsize(file_path) / (end_time - start_time) / 1024  # Upload speed in KB/s
        return upload_speed
    except Exception as e:
        print(f"Error uploading {file_path} to {ftp_host['name']} ({ftp_host['host']}:{ftp_host['port']}): {str(e)}")
        return None

# Function to log the upload status, including speed, in an Excel file with a timestamp
def log_upload_status(excel_file, sheet_name, file_name, status, speed):
    wb = openpyxl.load_workbook(excel_file)
    
    if sheet_name not in wb.sheetnames:
        wb.create_sheet(sheet_name)
    
    ws = wb[sheet_name]
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    ws.append([file_name, status, speed, timestamp])
    wb.save(excel_file)

# Function to upload files for a specific host in a separate thread
def upload_files_for_host(host_info, files, excel_file):
    for file_to_upload in files:
        upload_speed = upload_file(host_info, file_to_upload, host_info['path'])
        if upload_speed is not None:
            log_upload_status(excel_file, host_info['name'].replace(".", "_"), file_to_upload, "Success", f"{upload_speed:.2f} KB/s")
        else:
            log_upload_status(excel_file, host_info['name'].replace(".", "_"), file_to_upload, "Failed", "N/A")
def main():
    parser = argparse.ArgumentParser(description="Upload files to FTP servers and log the results.")
    parser.add_argument("-e", "--excel", type=str, default=excelftplog, help=f"Excel file to log results (default: {excelftplog})")
    args = parser.parse_args()

    threads = []

    for host_info_daily in ftp_hosts_daily:
        thread = threading.Thread(target=upload_files_for_host, args=(host_info_daily, daily_files, args.excel))
        threads.append(thread)
        thread.start()
        
    for host_info_weekly in ftp_hosts_weekly:
        thread = threading.Thread(target=upload_files_for_host, args=(host_info_weekly, weekly_files, args.excel))
        threads.append(thread)
        thread.start()

    for thread in threads:
        thread.join()

    print("Upload process completed.")

if __name__ == "__main__":
    main()