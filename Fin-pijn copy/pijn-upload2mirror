#!/usr/bin/env python3
import argparse
import ftplib
import json
import os
import sys
import time
from pathlib import Path
from pprint import pprint

import magic
import pandas as pd
import requests
from selenium import webdriver
from selenium.webdriver.common.by import By

ftpserver = 'testmirror.zakarmedia.com'
ftpuser = 'pijnnews'
ftppass = 'GodBlessYou'


mime = magic.Magic(mime=True)


def parseExcel(excelfile, videofile):
    df = pd.DataFrame(pd.read_excel(excelfile))
    for index, row in df.iterrows():
        if row['Filename'] == videofile:
            return(row)


def lightcastCreate(data, logfile):
    url = 'https://www.lightcast.com/api/public/v1/archives.php'
    payload = {'action': 'create', 'accountId': ltaccountId, 'apiKey': ltapi, 'type': 'video',
               'title': data['title'], 'description': data['description'], 'language': 'en',
               'assignToChannel': ltchannel}
    print(payload)
    req = requests.post(url, data=payload, timeout=(5, 300))
    with open(logfile + '.ltcreate.json', 'w') as outfile:
        json.dump(req.json(), outfile, indent=2)
    print(f'LightCast Create:\n{req.text}\n\n')
    response = req.json()
    return(response['media_id'])


def lightcastUpload(data, logfile):
    url = 'https://www.lightcast.com/api/public/v1/archives.php'
    payload = {'action': 'upload', 'accountId': ltaccountId, 'apiKey': ltapi,
               'mediaId': data['mediaId'], 'server': ftpserver, 'username': ftpuser,
               'password': ftppass, 'filepath': data['ltvideopath']}
    print(payload)
    req = requests.post(url, data=payload, timeout=(5, 300))
    print(req.url)
    with open(logfile + '.ltvideo.json', 'w') as outfile:
        json.dump(req.json(), outfile, indent=2)
    print(f'LightCast Video:\n{req.text}\n\n')


def lightcastThumb(data, logfile):
    url = 'https://www.lightcast.com/api/public/v1/archives.php'
    payload = {'action': 'thumbUpload', 'accountId': ltaccountId, 'apiKey': ltapi, 'mediaId': data['mediaId'],
               'server': ftpserver, 'username': ftpuser, 'password': ftppass,
               'filepath': data['ltthumbnail']}
    print(payload)
    req = requests.post(url, data=payload, timeout=(5, 300))
    print(req.url)
    with open(logfile + '.ltthumb.json', 'w') as outfile:
        json.dump(req.json(), outfile, indent=2)
    print(f'LightCast Thumbnail:\n{req.text}\n\n')
    payload2 = {'action': 'deactivate', 'accountId': ltaccountId,
                'apiKey': ltapi, 'mediaId': data['mediaId']}
    req = requests.post(url, data=payload2, timeout=(5, 300))


def lightcastSubtitle(data, logfile):
    url = 'https://www.lightcast.com/api/public/v1/archives.php?action=subtitleUpload'
    payload = {'action': 'subtitleUpload', 'accountId': ltaccountId, 'apiKey': ltapi,
               'mediaId': data['mediaId'], 'server': ftpserver, 'username': ftpuser,
               'password': ftppass, 'language': 'en', 'filepath': data['ltsubtitle']}
    print(payload)
    req = requests.post(url, data=payload, timeout=(5, 300))
    print(req.url)
    with open(logfile + '.ltsub.json', 'w') as outfile:
        json.dump(req.json(), outfile, indent=2)
    print(f'LightCast Subtitle:\n{req.text}\n\n')


def lightftpcheck(ftppath):
    ftp = ftplib.FTP()
    ftp.connect(ftpserver, 21)
    ftp.login(ftpuser, ftppass)
    try:
        resp = ftp.size(ftppath)
        print(ftppath, "is", resp, "bytes")
    except ftplib.error_perm:
        print(ftppath, "Does not exist!")
        sys.exit(1)
    return


def lightDelete()
    ftps = ftplib.FTP(ftpserver, ftpuser, ftppass)
    ftps.encoding = "utf-8"

    # Enter File Name with Extension

    def FtpRmTree(ftp, path):
        wd = ftp.pwd()
        try:
            names = ftp.nlst(path)
        except ftplib.all_errors as e:
            # some FTP servers complain when you try and list non-existent paths
            print('FtpRmTree: Could not remove {0}: {1}'.format(path, e))
            return
        for name in names:
            if os.path.split(name)[1] in ('.', '..'): continue
            print('FtpRmTree: Checking {0}'.format(name))
            try:
                ftp.cwd(name)  # if we can cwd to it, it's a folder
                ftp.cwd(wd)  # don't try a nuke a folder we're in
                FtpRmTree(ftp, name)
            except ftplib.all_errors:
                ftp.delete(name)
        try:
            ftp.rmd(path)
        except ftplib.all_errors as e:
            print('FtpRmTree: Could not remove {0}: {1}'.format(path, e))

    currentcontent = ftps.nlst('/PIJN')
    for x in currentcontent:
        FtpRmTree(ftps, x)


def lightftpupload(ftppath):
    ftp = ftplib.FTP()
    ftp.connect(ftpserver, 21)
    ftp.login(ftpuser, ftppass)
    try:
        resp = ftp.size(ftppath)
        print(ftppath, "is", resp, "bytes")
    except ftplib.error_perm:
        print(ftppath, "Does not exist!")
        sys.exit(1)
    return


def main(argv):

    my_parser = argparse.ArgumentParser(
        description='Get Info from Excel for filename')
    my_parser.add_argument('ExcelFile',
                           metavar='ExcelFile',
                           type=str,
                           help='The Excell file with the PIJN Info')
    # my_parser.add_argument('VideoFile',
    #                        metavar='VideoFile',
    #                        type=str,
    #                        help='The Video File')
    my_parser.add_argument('VideoFiles',
                           metavar='VideoFiles',
                           nargs='+',
                           help='The Video File(s)')
    my_parser.add_argument('-d',
                           '--delete',
                           action='store_true',
                           help='Deletes all files on testmirror')
    my_parser.add_argument('-l',
                           '--lightcast',
                           action='store_true',
                           help='Only upload to Lightcast')
    argp = my_parser.parse_args()
    if arg.delete:
        lightDelete()

    parsefiles = argp.VideoFiles
    videofiles = []
    for x in parsefiles:
        if os.path.exists(x):
            videofiles.append(x)
            # print('Adding:', x)
        else:
            # print('Deblobbing:', x)
            for xx in iglob(x):
                if os.path.exists(xx):
                    videofiles.append(xx)
                # print('Adding:', xx)
    for file in videofiles:

        if os.path.exists(file):
            vidsource = file
            vidfilename = Path(vidsource).name
            videofile = Path(vidsource).stem
            vidfile = videofile.replace("-cc", "")
        else:
            # sys.exit(f"Video file {vidsource} does not exist!")
            print(f"Video file {file} does not exist!")

        if not os.path.exists(argp.ExcelFile):
            print(f"Excel file {argp.ExcelFile} does not exist!")
            # sys.exit(f"Excel file {argp.ExcelFile} does not exist!")
        # print(f'Excel File: {argp.ExcelFile}\nVideo Filename: {vidfile}')
        else:
            excelfile = Path(argp.ExcelFile).absolute()
            mainfolder = str(Path(excelfile).parent)
            monthweek = Path(Path(excelfile).parent).name
            data = parseExcel(excelfile, vidfile)
            # print(f'Data: {data}')
            title = data['Episode Title (100 Char Max)'].strip()
            description = data['Episode Description'].strip()
            guid = data['Media ID'].strip()
            ltvideopath = str('/PIJN/' + str(monthweek) +
                              '/MP4/1080p60/' + str(vidfile) + '-cc.mp4')
            ftpsend()
            ltthumbnail = str('/PIJN/' + str(monthweek) +
                              '/thumbs/' + str(vidfile) + '.jpg')
            ltsubtitle = str('/PIJN/' + str(monthweek) +
                             '/Captions/' + str(vidfile) + '.vtt')
            logpath = str(Path(excelfile).parent) + '/logs'
            logfile = logpath + '/' + vidfile
            # print('Logpath:', logpath)
            # print('Logfile:', logfile)
            if not os.path.exists(logpath):
                os.makedirs(logpath)

            rumbledata = {'title': title, 'description': description, 'guid': guid,
                          'license_type': 6, 'access_token': rumbleapi, 'channel_id': rumblechannel}
            ltdata = {'title': title, 'description': description + addtolightcastdesc, 'ltvideopath': ltvideopath,
                      'ltthumbnail': ltthumbnail, 'ltsubtitle': ltsubtitle}
        if argp.all:
            argp.lightcast = True
            argp.rumble = True
            argp.lightcast = True

        if argp.lightcast:
            lightftpcheck(ltvideopath)
            lightftpcheck(ltthumbnail)
            lightftpcheck(ltsubtitle)
            ltmediaid = lightcastCreate(ltdata, logfile)
            if ltmediaid:

                try:
                    ltdata['mediaId'] = ltmediaid
                    lightcastUpload(ltdata, logfile)
                    lightcastThumb(ltdata, logfile)
                    lightcastSubtitle(ltdata, logfile)
                except:
                    print('Uploading to Lightcast FAILED!')


        # if not argp.salem or not argp.rumble or not argp.lightcast:
        #     print('No Task added... Run with -h for help')


if __name__ == "__main__":
    main(sys.argv[1:])
