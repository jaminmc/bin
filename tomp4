#!/bin/bash
FFMPEG="nice ffmpeg"
q=16
max=40M
buffsize=0
r=0
vfenabled=0
vf=""
extention="mp4"
x264opts=":colorprim=bt709:transfer=bt709:colormatrix=bt709"
while getopts ":2357a:A:b:B:CcdDe:fHiPm:Mo:Op:r:s:q:t:vw:y" opt; do
	case $opt in
		2)
			echo "2 Pass compression enabled!!"
			twopass=1
			;;
		3)
			echo "cropping to 2:39 aspect"
			#ffextra="-vf crop=1920:804 $ffextra"
			vfenabled=1
			vf="${vf}crop=1920:804,"
			;;
		5)
			echo "Will be using h265!!"
			h265=1
			;;
		7)
			is720=1
			;;
		a)
			echo "Adding Extra settings of $OPTARG"
			ffextra="$OPTARG $ffextra"
			;;
		A)
			echo "Adding Other Source of \"$OPTARG\""
			ffextra1="-i $OPTARG"
			;;
		b)
			echo "Setting Bitrate to "$(echo "$OPTARG" | tr '[:lower:]' '[:upper:]' )""
			ffextra="-b:v $(echo "$OPTARG" | tr '[:lower:]' '[:upper:]' ) $ffextra"
			bitrateb=$(echo "$OPTARG" | tr '[:lower:]' '[:upper:]' )
			#((max= bitrateb * 1.5))
			bitrate=1
			;;
		B)
			echo "Setting Bitrate Max to "$(echo "$OPTARG" | tr '[:lower:]' '[:upper:]' )""
			buffsize=$(echo "$OPTARG" | tr '[:lower:]' '[:upper:]' )
			;;
		C)
			echo "Cropping enabled from higher than 1080 res."
			vfenabled=1
			vf="${vf}scale=w=1920:h=1080:force_original_aspect_ratio=1,pad=1920:1080:(ow-iw)/2:(oh-ih)/2,"
			#ffextra="-vf scale=w=1920:h=1080:force_original_aspect_ratio=1,pad=1920:1080:(ow-iw)/2:(oh-ih)/2 -aspect 16:9"
			ffextra="$ffextra -aspect 16:9"
			;;
		c)
			echo "Making For closed captioning."
			ffextra="-s 640x360 $ffextra"
			q=24
			;;
		d)
			echo "Deinterlacing and doubling frame rate."
			vfenabled=1
			vf="${vf}yadif=1,"
			#ffextra="-vf yadif=1 $ffextra"
			double=1
			deinterlace=1
			;;
		D)
			echo "Deinterlacing and maintaining frame rate."
			vfenabled=1
			vf="${vf}yadif=0,"
			# ffextra="-vf yadif=0 $ffextra"
			deinterlace=1
			;;
		e)
			echo "Setting Extension to $OPTARG"
			extention=$OPTARG
			;;
		r)
			echo "Making Framerate $OPTARG."
			ffextra="-r $OPTARG $ffextra"
			r=$OPTARG
			;;
		f)
			echo "Making Faster decode."
			ffextra="-tune fastdecode $ffextra"
			;;
		H)
			echo "Making Video 1/2 source Resulution."
			vfenabled=1
			vf="${vf}scale=iw/2:ih/2,"
			;;
		i)
			echo "Making sure it stays interlaced."
			x2extra=":tff=1"
			ffextra="-flags +ildct+ilme -top 1 $ffextra"
			Interlace=1
			;;
		m)
			echo "Making max bitrate $(echo "$OPTARG" | tr '[:lower:]' '[:upper:]' )"
			max=$(echo "$OPTARG" | tr '[:lower:]' '[:upper:]' )
			buffsize=$max
			;;
		M)
			ffextra1="-filter_complex '[0:1][0:2]amerge[aout]' -map 0:v -map '[aout]' $ffextra1"
			;;
		o)
			echo "Making max bitrate $OPTARG"
			OutputFolder=$OPTARG
			;;
		O)
			echo "Making open GOP"
			ffextra2="-flags -cgop"
			;;
		p)
			echo "Setting Preset to $OPTARG"
			ffextra="-preset:v $OPTARG $ffextra"
			;;
		P)
			echo "Making a Jpeg of first frame"
			pictureframe=1
			;;
		q)
			echo "Setting Quality to $OPTARG"
			q="$OPTARG"
			bitrate=0
			;;
		s)
			echo "Setting Resulution to $OPTARG"
			ffextra="-s $OPTARG $ffextra"
			;;
		t)
			echo "Starting $OPTARG deconds in"
			ffextrapre="-ss $OPTARG $ffextrapre"
			;;
		v)
			echo "Setting very slow profile for x264."
			ffextra="-preset veryslow $ffextra"
			;;
		w)
			#echo "cropping to 185 aspect"
			#ffextra="-vf crop=1920:820 $ffextra"
			echo "Adding Watermark"
			ffextra2="-i $OPTARG -filter_complex overlay $ffextra2"
			# ffextra2="-i $OPTARG $ffextra2"
			# ffextra1="-i $OPTARG -filter_complex overlay $ffextra1"
			# vf="${vf}overlay,"
			watermark=1
			;;
		y)
			echo "Adding Deinterlacing, Keeping Framerate."
			vfenabled=1
			vf="${vf}yadif=0,"
			# ffextra="-vf yadif=0 $ffextra"
			;;

		\?)
			echo "Invalid option: -$OPTARG" >&2
			exit 1
			;;
	esac
done
shift $((OPTIND-1))
if [[ $buffsize = 0 ]] || [[ $buffsize = "" ]]; then
	buffsize=$max
fi


if [[ $bitrate != 1 ]]; then
	ffextra="$ffextra -crf $q"
	twopass=0
	echo "Quality is $q"
fi
for i in "$@"; do
	ivf=$vf
	infile="$i"
	iffextra=$ffextra
	iffextra1=$ffextra1
	iffextrapre=$ffextrapre
	iffextra2=$ffextra2
	idouble=$double
	ideinterlace=$deinterlace
	srcdir="$(dirname "$i")"
	echo "srcdir=$srcdir"
	srcfile="$(basename "$i")"
	echo "srcfile=$srcfile"


	if [[ $watermark = 1 ]]; then
		if [[ $OutputFolder = "" ]]; then
			out="${i%.*}-Watermarked.$extention"
		else
			out="$OutputFolder/${srcfile%.*}-Watermarked.$extention"
		fi

	else
		if [[ $h265 != 1 ]]; then

			if [[ $OutputFolder = "" ]]; then
				out="${i%.*}.$extention"
			else
				out="$OutputFolder/${srcfile%.*}.$extention"
			fi

		else

			if [[ $OutputFolder = "" ]]; then
				out="${i%.*}-h265.$extention"
			else
				out="$OutputFolder/${srcfile%.*}-h265.$extention"
			fi

		fi
	fi
	if [[ "$(echo "$infile" | tr '[:upper:]' '[:lower:]')" = "$(echo "$out" | tr '[:upper:]' '[:lower:]')" ]]; then
		out="${infile%.*}-new.$extention"
		if [[ $watermark != 1 ]]; then
			iffextra1="$iffextra1 -map 0:v -map 0:a?"
		fi
		ac=1
	fi
	if [[ $(mediainfo --Inform="Audio;%Format%" "$infile") = "AAC" ]] && [[ $ac != 1 ]]; then
		iffextra="$iffextra -c:a copy"
		if [[ $watermark != 1 ]]; then
			iffextra1="$iffextra1 -map 0:v -map 0:a?"
		fi
		ac=1
	fi
	if [[ $ac != 1 ]]; then
		channelsd=$(mediainfo --Inform="Audio;%Channels%" "$infile")
		if [[ $channelsd -gt 2 ]]; then
			if [[ $channelsd = 6 ]]; then
				echo "Audio is greater than Stereo, Raising audio bitrate"
				iffextra="$iffextra -b:a 448k -channel_layout 5.1"
			elif [[ $channelsd = 8 ]]; then
				iffextra="$iffextra -b:a 384k -af channelmap=map=DL-FL|DR-FR"
			else
				echo "Audio is greater than Stereo, Raising audio bitrate"
				iffextra="$iffextra -b:a 448k"
			fi
		else
			iffextra="$iffextra -b:a 384k"
		fi
		if [[ $watermark != 1 ]]; then
			iffextra1="$iffextra1 -map 0:v -map 0:a?"
		fi
	fi
	if [[ $bitrate = 1 ]]; then

		if [[ $OutputFolder = "" ]]; then
			out="${i%.*}-$bitrateb.$extention"
		else
			out="$OutputFolder/${srcfile%.*}-$bitrateb.$extention"
		fi

	fi

	if [[ $r != 0 ]]; then
		echo "Using set framerate of $r."
		iframe=$(echo "$r" | awk '{printf("%d\n",$1 + 0.5)}')
		((iframe= iframe * 3))
		echo "I frame distance is \"$iframe\" based on set Framerate."
	else
		fps=$(mediainfo --Inform="Video;%FrameRate%" "$infile" | awk '{printf("%d\n",$1 + 0.5)}')
		fpsr=$(mediainfo --Inform="Video;%FrameRate%" "$infile" )
		echo "Detected Frame Rate is \"$fpsr\""
		iframe=$(echo "$fps" | awk '{printf("%d\n",$1 + 0.5)}')
		((iframe= iframe * 3))
		echo "Detected I frame distance is \"$iframe\""

	fi
	if [[ $bitrate != 1 ]]; then
		echo "Quality is $q"
	fi
	if [[ $pictureframe = 1 ]]; then
		$FFMPEG $iffextrapre -i "$i" $iffextra1 -metadata xmp="" -loglevel verbose -y  $iffextra  "${out%.*}.jpg"
	fi
	if [[ $( mediainfo --Inform="Video;%ScanType%" "$infile" ) != "Progressive" ]] && [[ $is720 != 1 ]] && [[ $ideinterlace != 1 ]]; then
		echo "iffextra="$iffextra -flags +ildct+ilme""
		iffextra="$iffextra -flags +ildct+ilme"
		if [[ $( mediainfo --Inform="Video;%ScanOrder%" "$infile" ) = "BFF" ]]; then
			echo "x264opts=$x264opts:bff=1"
			x264opts="$x264opts:bff=1"
		else
			echo "x264opts=$x264opts:tff=1"
			x264opts="$x264opts:tff=1"
		fi
	fi
	if [[ $is720 = 1 ]]; then
		out="${i%.*}-720p.$extention"
		if { [[ $fps = 30 ]] || [[ $fps = 25 ]]; } && [[ $(mediainfo "$infile" | grep -m 1 "Scan type" | sed -e 's/.*:\ //') = "Interlaced" ]]; then
			echo "Detected Interlaced Source!!!!"
			echo "Resizing to 720p and Deinterlacing to double frame rate"
			if [[ $( mediainfo --Inform="Video;%ScanOrder%" "$infile" ) = "BFF" ]]; then
				vfenabled=1
				ivf="${ivf}yadif=1:1,scale=-2:720,"
				# iffextra="$iffextra -vf yadif=1:1,scale=-2:720"
			else
				vfenabled=1
				ivf="${ivf}yadif=1:0,scale=-2:720,"
				# iffextra="$iffextra -vf yadif=1:0,scale=-2:720"
			fi

			iframe=$(( iframe * 2 ))
			echo "Doubling frame rate... I frame distance is now \"$iframe\""
			x264opts="$x264opts:colorprim=bt709:transfer=bt709:colormatrix=bt709"
		else
			echo "Resizing to 720p"
			vfenabled=1
			ivf="${ivf}scale=1280:-2,"
			# iffextra="$iffextra -vf scale=1280:-2"
			x264opts="$x264opts:colorprim=bt709:transfer=bt709:colormatrix=bt709"
		fi
	fi
	if [[ $idouble = 1 ]]; then
		iframe=$(( iframe * 2 ))
		echo "Doubling frame rate... I frame distance is now \"$iframe\""
	fi
	if [[ $twopass != 1 ]]; then
		echo "Doing a single pass.."
		echo "File is=$i"
		echo "Out file is $out"
		echo "Extra ffmpeg options: $iffextra"
		echo "Extra x264 options: $x264opts"
		echo "vf is ${ivf%?}"

		#$FFMPEG $iffextrapre -i "$i" $iffextra1 -pix_fmt yuv420p -metadata xmp="" -loglevel verbose -y -g $iframe $iffextra -maxrate:v $max -bufsize:v $buffsize -x264opts ref=4:qpmin=4$x264opts -movflags +faststart "$out"
		if [[ $h265 != 1 ]]; then
			echo "$FFMPEG $iffextrapre -i \"$i\" $iffextra1  $iffextra2 -pix_fmt yuv420p -metadata xmp=\"\" -loglevel verbose -y $([[ $ivf != "" ]] && echo "-vf ${ivf%?}") $iffextra -x264opts ref=4:qpmin=4$x264opts -movflags +faststart \"$out\""
			$FFMPEG $iffextrapre -i "$i" $iffextra1 $iffextra2 -pix_fmt yuv420p -metadata xmp="" -loglevel verbose -y $([[ $ivf != "" ]] && echo "-vf ${ivf%?}") $iffextra -x264opts ref=4:qpmin=4$x264opts -movflags +faststart "$out"
		else
			echo "$FFMPEG $iffextrapre -i \"$i\" $iffextra1 $iffextra2 -pix_fmt yuv420p -metadata xmp=\"\" -loglevel verbose -y $([[ $ivf != "" ]] && echo "-vf ${ivf%?}") $iffextra -movflags +faststart \"$out\""
			$FFMPEG $iffextrapre -i "$i" $iffextra1 $iffextra2 -pix_fmt yuv420p -metadata xmp="" -loglevel verbose -y $([[ $ivf != "" ]] && echo "-vf ${ivf%?}") $iffextra -c:v libx265 -movflags +faststart "$out"
		fi
	else
		outtemp="/tmp/$srcfile.tmp"
		echo "Doing a double pass.."
		echo "File is=$i"
		echo "Out file is $out"
		echo "OutTemp file is $outtemp"
		echo "Extra ffmpeg options: $iffextra"
		echo "Extra x264 options: $x2extra"
		echo "vf is ${ivf%?}"
		echo "Pass 1"
		if [[ $h265 != 1 ]]; then
			echo "$FFMPEG $iffextrapre -i \"$i\" $iffextra2 -pix_fmt yuv420p -loglevel verbose -y $([[ $ivf != "" ]] && echo "-vf ${ivf%?}") -g $iframe $iffextra -maxrate:v $max -bufsize:v $buffsize -x264opts ref=4:qpmin=4$x264opts -pass 1 -passlogfile \"$outtemp\" -f mp4 -an /dev/null"
			$FFMPEG $iffextrapre -i "$i" $iffextra2 -pix_fmt yuv420p -loglevel verbose -y $([[ $ivf != "" ]] && echo "-vf ${ivf%?}") -g $iframe $iffextra -maxrate:v $max -bufsize:v $buffsize -x264opts ref=4:qpmin=4$x264opts -pass 1 -passlogfile "$outtemp" -f mp4 -an /dev/null
			echo "Pass 2"
			echo "$FFMPEG $iffextrapre -i \"$i\" $iffextra1 $iffextra2 -pix_fmt yuv420p -loglevel verbose -y $([[ $ivf != "" ]] && echo "-vf ${ivf%?}") -g $iframe $iffextra -maxrate:v $max -bufsize:v $buffsize -x264opts ref=4:qpmin=4$x264opts -pass 2 -passlogfile \"$outtemp\" -movflags +faststart \"$out\""
			$FFMPEG $iffextrapre -i "$i" $iffextra1 $iffextra2 -pix_fmt yuv420p -loglevel verbose -y $([[ $ivf != "" ]] && echo "-vf ${ivf%?}") -g $iframe $iffextra -maxrate:v $max -bufsize:v $buffsize -x264opts ref=4:qpmin=4$x264opts -pass 2 -passlogfile "$outtemp" -movflags +faststart "$out"
			# rm "$outtemp"*
		else
			echo "$FFMPEG $iffextrapre -i \"$i\" $iffextra2 -pix_fmt yuv420p -loglevel verbose -y $([[ $ivf != "" ]] && echo "-vf ${ivf%?}") -g $iframe $iffextra -maxrate:v $max -bufsize:v $buffsize -x265-params pass=1$x265opts -passlogfile \"${out%.*}.tmp\" \"/tmp/${out##*/}\""
			$FFMPEG $iffextrapre -i "$i" $iffextra2 -pix_fmt yuv420p -loglevel verbose -y $([[ $ivf != "" ]] && echo "-vf ${ivf%?}") -g $iframe $iffextra -maxrate:v $max -bufsize:v $buffsize -x265-params pass=1$x265opts -passlogfile "$outtemp" -f mp4 -an /dev/null
			echo "Pass 2"
			echo "$FFMPEG $iffextrapre -i \"$i\" $iffextra1 $iffextra2 -pix_fmt yuv420p -loglevel verbose -y $([[ $ivf != "" ]] && echo "-vf ${ivf%?}") -g $iframe $iffextra -maxrate:v $max -bufsize:v $buffsize -x265-params pass=2$x265opts -passlogfile \"${out%.*}.tmp\" -movflags +faststart \"$out\""
			$FFMPEG $iffextrapre -i "$i" $iffextra1 $iffextra2 -pix_fmt yuv420p -loglevel verbose -y -g $iframe $iffextra -maxrate:v $max -bufsize:v $buffsize -x265-params pass=2$x265opts -passlogfile "$outtemp" -movflags +faststart "$out"
			#rm "$outtemp"*
		fi

	fi
done
say "MP4 Conversion Finished!"
